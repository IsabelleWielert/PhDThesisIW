function [results, errors] = psd(PathName, FileName, z, data, temp, handles)
   
   k_B = 1.38065E-23;
   path_psd_linear = [PathName, '\results\psd_linear_Bead', int2str(z), ...
       '_L', FileName, '.fig'];
   path_psd_loglog = [PathName, '\results\psd_loglog_Bead', int2str(z), ...
       '_L', FileName, '.fig'];
   path_psd_x =  [PathName, '\results\psd_x_linear_Bead', int2str(z), ...
       '_L', FileName, '.fig'];
   path_psd_y =  [PathName, '\results\psd_y_linear_Bead', int2str(z), ...
       '_L', FileName, '.fig'];
   
  
   nfft = size(data,1);
   n_psd = nfft/2 + 1;
   
   %psd_values defines the number of values of the periodogram estimate in
   %the range of 0 to f_nyq.
   
   f_s = str2double(get(handles.sampl_frequ,'String'));
   f_min = str2double(get(handles.f_min,'String'));
   f_max = str2double(get(handles.f_max,'String'));
   n_b = str2double(get(handles.n_b,'String'));
   f_nyq = f_s/2;
   T_msr = (1/f_s)*size(data,1);
   
   % Hs is a spectrum-object for estimating a periodogram with a
   % 'bartlett'-window
   Hs = spectrum.periodogram;%spectrum.welch(window, seg_length, overlap, 'UserDefined');
   
   %the function psd() below calculate the psd defined from 0 to f_nyq and
   %its integral is the mean squared amplitude of the dataseries 
   Hpsd_x = psd(Hs, data(:,1), 'Fs', f_s, 'NFFT', nfft, 'SpectrumType', 'onesided');
   Hpsd_y = psd(Hs, data(:,2), 'Fs', f_s, 'NFFT', nfft, 'SpectrumType', 'onesided');
   
  %path_noise = ['C:\Documents and Settings\Rainer\My Documents\
  %Experiment\Calib\STD_LASER_Phantom\noi_triangle\results\
  %power_spectrum_Bead', int2str(i),'_Lnoi_triangle.mat'];
  %load(path_noise, 'data_noise', '-mat');
   
   psd_xy(:,1) = Hpsd_x.Data;% - data_noise(:,1);
   psd_xy(:,2) = Hpsd_y.Data;% - data_noise(:,1);
   f = Hpsd_x.Frequencies';
%    freq_index = find(f<20);
    h = figure('Visible', 'off');
    plot(f, psd_xy(:,1), '-k', f, psd_xy(:,2), '-r');
    saveas(h, path_psd_linear, 'fig');
    close(h);

   %only for power spectra of noise
%        data_noise = psd_xy;
%         data_noise(:,3) = f;
%         path_noise = strrep(path, '.tif', '.mat');
%        save(path_noise, 'data_noise', '-mat');
   
   %Buildung up of psd-frequency-blocks with n_b in length in order to reduce noise
   
   b_max = ceil(n_psd/n_b);
   if (n_b~=1)
     n_b_last = n_psd - (b_max-1)*n_b;    
     f_bar(1:b_max) = 0;
     psd_xy_bar = zeros(b_max,2);
     if (n_b_last~=0)
         b_max = b_max - 1;
     end
     for i=1:b_max;
         for j=1:n_b;
             f_bar(i) = f_bar(i) + f(n_b*(i-1)+j);
             psd_xy_bar(i,:) = psd_xy_bar(i,:) + psd_xy(n_b*(i-1)+j,:);
         end    
     end
     f_bar = 1/n_b*f_bar;
     psd_xy_bar =1/n_b*psd_xy_bar;
     for j=1:n_b_last;
         f_bar(b_max+1) = f_bar(b_max+1) + f(n_b*b_max+j);
         psd_xy_bar(b_max+1,:) = psd_xy_bar(b_max+1,:) + psd_xy(n_b*b_max+j,:);
     end
     
%      folgende kommentierte Zeilen gehören zur Mittelung von mehreren powerspektren
%      path_data = [PathName, '\results\power_spectrum_Bead', int2str(3), '_L', FileName, '.mat'];
%      load(path_data, 'data_psd', '-mat');
%      psd_xy_bar = data_psd(:,:,z);
%      data_psd(:,:,z) = psd_xy_bar; 
%      if (z==3)
%         path_data = strrep(path, '.tif', '.mat');
%         save(path_data, 'data_psd', '-mat');
%      end
     
     if (n_b_last~=0)
        b_max = b_max + 1; 
        f_bar(b_max) = 1/n_b_last*f_bar(b_max);
        psd_xy_bar(b_max,:) =1/n_b_last*psd_xy_bar(b_max,:);
     end 
     f_plot = 10.^(0:log10(f_nyq)/b_max:log10(f_nyq));
     f_bar_plot(1:b_max) = 0;
     psd_xy_bar_plot(1:b_max, 1:2) = 0;
     n_b_plot = zeros(1, b_max);
     n_b_plot_prior = 0;
     for i=1:b_max;
        indices = find(f>=f_plot(i) & f<f_plot(i+1));
        n_b_plot(i) = size(indices,2);
        if (n_b_plot(i) == 0)
            continue;
        end
        for j=1:n_b_plot(i);
             f_bar_plot(i) = f_bar_plot(i) + f(n_b_plot_prior+j);
             psd_xy_bar_plot(i,:) = psd_xy_bar_plot(i,:) + psd_xy(n_b_plot_prior+j,:);
        end
        f_bar_plot(i) = 1/n_b_plot(i)*f_bar_plot(i);
        psd_xy_bar_plot(i,:) = 1/n_b_plot(i)*psd_xy_bar_plot(i,:);
        n_b_plot_prior = n_b_plot_prior + n_b_plot(i);
     end
   end   
   empty_el = find(f_bar_plot==0);
   f_bar_plot(empty_el)=[];
   psd_xy_bar_plot(empty_el,:)=[];
   n_b_plot(empty_el) = [];   
   
   %Bounds for graphical output in loglog plot
   low_b_log = ceil((b_max-1)/log10(f_nyq)*log10(f_min));
   up_b_log = ceil((b_max-1)/log10(f_nyq)*log10(f_max));
   %data for log plots
   f_bar_log = f_bar_plot;
   psd_x_bar_log = psd_xy_bar_plot(:,1)';
   psd_y_bar_log = psd_xy_bar_plot(:,2)';
   %Fitting only in the range of f_min - f_max.
   lower_bound = ceil(b_max/f_nyq*f_min);
   upper_bound = floor(b_max/f_nyq*f_max);
   %data for fitting and linear plotting
   if (n_b ~= 1)
       f_fit = f_bar(lower_bound:upper_bound); 
       psd_xy_ori = psd_xy_bar(lower_bound:upper_bound,1:2);
       psd_x_bar = psd_xy_bar(:,1);
       psd_y_bar = psd_xy_bar(:,2);
   else
       f_fit = f(lower_bound:upper_bound);
       f_bar = f;
       psd_xy_ori = psd_xy(lower_bound:upper_bound,1:2);
       psd_x_bar = psd_xy(:,1);
       psd_y_bar = psd_xy(:,2);
   end    
   
   D0 = 0.2;
   fc0 = 50;
   
   opts = fitoptions('Method','Nonlinear','StartPoint', [D0, ...
        fc0], 'Lower', [0.001, 1], 'Upper', [100, 1000],...
        'TolFun',1E-15, 'TolX', 0.01);
    
   fit_lorentzian = fittype('my_lorentzian([D,f_c], f_s, x)', ...
       'coeff', {'D', 'f_c'}, 'problem', 'f_s'); 

   %opts,   
    %D0 is in units of µm^2/s and fc0 is in units of Hz.
  
   [fit_x, gof_x, out_x] = fit(f_fit', psd_xy_ori(:,1), fit_lorentzian, ...
       opts, 'problem', f_s);       
   [fit_y, gof_y, out_y] = fit(f_fit', psd_xy_ori(:,2), fit_lorentzian, ...
       opts, 'problem', f_s);   
   
   num_iter_x = out_x.iterations;
   num_iter_y = out_x.iterations;
   D_x = fit_x.D;
   D_y = fit_y.D;
   fc_x = fit_x.f_c;
   fc_y = fit_y.f_c;
   
   %fitted psd_values 
   psd_fit_x = my_lorentzian([D_x, fc_x], f_s, f_bar');
   psd_fit_y = my_lorentzian([D_y, fc_y], f_s, f_bar');
   
   %R_square for x- and y-values
   R_square_x = gof_x.rsquare;
   R_square_y = gof_y.rsquare;
   
   %confidence interval for the fitted values D_x and f_c
   confi_x = confint(fit_x,0.68);
   confi_y = confint(fit_y,0.68);
   
   %r_x and r_y are residuals of the fit concerning the observed psd values
   r_x = out_x.residuals;
   r_y = out_x.residuals;
   
   max_x_res = max(r_x);
   max_y_res = max(r_y);
   
   u_D_x = confi_x(2,1) - confi_x(1,1);
   u_D_y = confi_y(2,1) - confi_y(1,1);
   u_fc_x = confi_x(2,2) - confi_x(1,2);
   u_fc_y = confi_y(2,2) - confi_y(1,2);
   
   %Calculation of drag coefficients in units of g/s 
   gamma_0_x = (1E15)*k_B*temp/D_x;
   gamma_0_y = (1E15)*k_B*temp/D_y;
   u_gamma_x = gamma_0_x*u_D_x/D_x;
   u_gamma_y = gamma_0_y*u_D_y/D_y;
   
   %Calculation of stiffnesses for x- and y-values
   stiffness_power_x = (1E3)*2*pi*fc_x*gamma_0_x;
   stiffness_power_y = (1E3)*2*pi*fc_y*gamma_0_y;
   u_stiff_x = stiffness_power_x*sqrt((u_fc_x/fc_x)^2 + ...
           (u_gamma_x/gamma_0_x)^2);
   u_stiff_y = stiffness_power_y*sqrt((u_fc_y/fc_x)^2 + ...
           (u_gamma_x/gamma_0_y)^2);
       
%    
%    D_xy = zeros(1,2);
%    f_c_xy = zeros(1,2);
%    gamma_0_xy = zeros(1,2);
%    stiffness_power_xy = zeros(1,2);
%    D_xy = [fit_x(1), fit_y(1)];
%    f_c_xy = [fit_x(2), fit_y(2)];
%    for k=1:2;
%        %Calculation of us for D and f_c
%         s_fc = sqrt(pi/(fun_u(f_min/f_c_xy(k), f_max/f_c_xy(k))-fun_v...
%             (f_min/f_c_xy(k), f_max/f_c_xy(k))));
%         s_D = sqrt(fun_u(f_min/f_c_xy(k), f_max/f_c_xy(k))/((1+pi/2)*...
%            (f_max/f_c_xy(k)-f_min/f_c_xy(k))))*s_fc;
%         u_fc(k) = s_fc/sqrt(pi*f_c_xy(k)*T_msr)*f_c_xy(k);
%         u_D(k) = sqrt((1+pi/2)/(pi*f_c_xy(k)*T_msr))*s_D*D_xy(k);
%        %Calculation of drag coefficients in units of g/s 
%        gamma_0_xy(k) = (1E15)*k_B*temp/D_xy(k);
%        u_gamma(k) = gamma_0_xy(k)*u_D(k)/D_xy(k);
%        %Calculation of stiffnesses for x- and y-values
%        stiffness_power_xy(k) = (1E3)*2*pi*f_c_xy(k)*gamma_0_xy(k);
%        u_stiffness(k) = stiffness_power_xy(k)*sqrt((u_fc(k)/f_c_xy(k))^2 + ...
%            (u_gamma(k)/gamma_0_xy(k))^2);
  %    end
   
 
   
   h = figure('Visible', 'off');
    subplot(2,1,1), errorbar(f_bar, psd_x_bar, psd_x_bar/sqrt(n_b), '.r'), ...
             ylabel('power spectrum [µm^2s]','FontSize',12), ...
             xlabel('frequency [Hz]','FontSize',12), title(['Bead ',int2str(z),...
             ': Power spetral density for x-values'],'FontSize',12), ...
             axis([min(f_bar) max(f_bar) min(psd_x_bar) max(psd_x_bar)]);%,...
    hold on
    plot(1:1:f_nyq, my_lorentzian([D_x, ...
             fc_x], f_s, (1:1:f_nyq)')', '-r');
%     hold on
%     plot(f_fit,  [ypred_x+delta_x,ypred_x-delta_x], '--r'),
    legend('exp. data (blocked)', 'fit', 'Location', 'NE');
    %set(gca, 'Xscale', 'log', 'Yscale', 'log')
    hold off

    subplot(2,1,2), bar(f_fit, r_x, 'r'), ylabel('Residuals','FontSize',12), ...
             xlabel('frequency [Hz]','FontSize',12), title(['Bead ',int2str(z),...
             ': Distribution of residuals for x-values'],'FontSize',12), ...
             axis([min(f_fit) max(f_fit) -max_x_res max_x_res]),...
             legend('residuals', 'Location', 'NE'),...
             text(min(f_fit)+20, max_x_res - 2*max_x_res/10,['R^2 =', ...
             num2str(R_square_x, '%1.5f')],'BackgroundColor',...
             [1 1 1],'FontSize',10);%

   saveas(h, path_psd_x, 'fig');
   close(h);

   h = figure('Visible', 'off');
    subplot(2,1,1), errorbar(f_bar, psd_y_bar, psd_y_bar/sqrt(n_b), '.r'), ...
             ylabel('power spectrum [µm^2s]','FontSize',12), ...
             xlabel('frequency [Hz]','FontSize',12), title(['Bead ',int2str(z),...
             ': Power spetral density for y-values'],'FontSize',12), ...
             axis([min(f_bar) max(f_bar) min(psd_y_bar) max(psd_y_bar)]);%,...

    hold on
    plot(1:1:f_nyq, my_lorentzian([D_y, ...
             fc_y], f_s, (1:1:f_nyq)')', '-r');
%     hold on
%     plot(f_fit, [ypred_y+delta_y,ypred_y-delta_y], '--r'), 
    legend('exp. data (blocked)', 'fit', 'Location', 'NE');
    hold off
    

    subplot(2,1,2), bar(f_fit, r_y, 'r'), ylabel('Residuals','FontSize',12), ...
             xlabel('frequency [Hz]','FontSize',10), title(['Bead ',int2str(z),...
             ': Distribution of residuals for y-values'],'FontSize',12), ...
             axis([min(f_fit) max(f_fit) -max_y_res max_y_res]),...
             legend('residuals', 'Location', 'NE'),...
             text(min(f_fit)+ 20, max_y_res - 2*max_y_res/10,['R^2 =', ...
             num2str(R_square_y, '%1.5f')],'BackgroundColor',...
             [1 1 1],'FontSize',12);%

   saveas(h, path_psd_y, 'fig');
   close(h);
   
  h = figure('Visible', 'off');    
  subplot(2,1,1), errorbarloglog(f_bar_log, psd_x_bar_log, ...
        psd_x_bar_log-psd_x_bar_log/sqrt(n_b),...
        psd_x_bar_log+psd_x_bar_log/sqrt(n_b), 'none', '.', 'r'), ...
  xlabel('frequency [Hz]','FontSize',10), ylabel('power [µm²s]','FontSize',10),...
      title(['Bead ' ,int2str(z),': Power spectral density for x-values'],'FontSize',12), ...
  axis([f_min f_max min(psd_x_bar_log) max(psd_x_bar_log)]), grid on, grid minor,...
  text(min(f_fit), min(psd_xy_ori(:,1)) + 1/2*max(psd_xy_ori(:,1)),...
     ['Results: \newline D = ', num2str(D_x, '(%1.2e'), '\pm',...
     num2str(u_D_x, '%1.2e)µm^2/s'), '\newline f_c = ',...
     num2str(fc_x, '(%3.0f'), '\pm', num2str(u_fc_x, ...
     '%3.0f)Hz'), '\newline \gamma = ',...
     num2str(gamma_0_x, '(%1.2e'), '\pm', num2str(u_gamma_x, ...
     '%1.2e)g/s'), '\newline \kappa = ',...
     num2str(stiffness_power_x/1000, '(%1.4f'), '\pm',...
     num2str(u_stiff_x/1000, ...
     '%1.4f)pN/nm')], 'BackgroundColor', 'r', 'FontSize',9);%
  hold on
  loglog(1:1:f_nyq, my_lorentzian([D_x, ...
             fc_x], f_s, (1:1:f_nyq)')', 'r');
  hold off
  
  subplot(2,1,2), errorbarloglog(f_bar_log, psd_y_bar_log, ...
        psd_y_bar_log-psd_y_bar_log/sqrt(n_b),...
        psd_y_bar_log+psd_y_bar_log/sqrt(n_b), 'none', '.', 'r'), ...
  xlabel('frequency [Hz]','FontSize',10), ylabel('power [µm²s]','FontSize',10), ...
      title(['Bead ' ,int2str(z),': Power spectral density for y-values'],'FontSize',12), ...
  axis([f_min f_max min(psd_y_bar_log) max(psd_y_bar_log)]), grid on, grid minor,...
  text(min(f_fit), min(psd_xy_ori(:,2)) + 1/2*max(psd_xy_ori(:,2)),...
     ['Results: \newline D = ', num2str(D_y, '(%1.2e'), '\pm',...
     num2str(u_D_y, '%1.2e)µm^2/s'), '\newline f_c = ',...
     num2str(fc_y, '(%3.0f'), '\pm', num2str(u_fc_y, ...
     '%3.0f)Hz'), '\newline \gamma = ',...
     num2str(gamma_0_y, '(%1.2e'), '\pm', num2str(u_gamma_y, ...
     '%1.2e)g/s'), '\newline \kappa = ',...
     num2str(stiffness_power_y/1000, '(%1.4f'), '\pm',...
     num2str(u_stiff_y/1000, ...
     '%1.4f)pN/nm')], 'BackgroundColor', 'r', 'FontSize',9);%
  hold on
  loglog(1:1:f_nyq, my_lorentzian([D_y, ...
             fc_y], f_s, (1:1:f_nyq)')', 'r');
  hold off
  
  saveas(h, path_psd_loglog, 'fig')
  close(h);

  
results = [fc_x, fc_y; D_x, D_y; gamma_0_x, gamma_0_y; ...
    stiffness_power_x, stiffness_power_y; f_min, f_max;...
    R_square_x, R_square_y; n_b, length(f_fit)];
errors = [u_fc_x, u_fc_y; u_D_x, u_D_y; u_gamma_x, u_gamma_y; ...
    u_stiff_x, u_stiff_y];
   
end

function [u] = fun_u(x_1, x_2)
  u = 2*x_2/(1+x_2^2)-2*x_1/(1+x_1^2)+2*atan((x_2-x_1)/(1+x_1*x_2));
end

function [v] = fun_v(x_1, x_2)
  v = 4/(x_2-x_1)*atan((x_2-x_1)/(1+x_1*x_2))^2;
end  


